name: Full CI Pipeline

on:
  # push:
  #   branches: [main]
  # pull_request:
  workflow_dispatch:

jobs:
  build-backend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: spring-boot-app

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin     # Required input
          java-package: jdk
          check-latest: false
          server-id: github
          server-username: ${{ secrets.GITHUB_ACTOR }}
          server-password: ${{ secrets.GITHUB_TOKEN }}
          overwrite-settings: true

      - name: Run Gitleaks scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}  # only for org repos
        with:
          config: .gitleaks.toml   # custom config file
          redact: true             # mask actual secrets in logs
          fail: true               # fail the job if leaks found
          
      - name: Build & Test
        run: mvn clean verify

      - name: Set Docker Image Tag
        run: echo "IMAGE_TAG=build-${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV

      - name: Build Docker Image
        run: docker build -t ${{secrets.ECR_REGISTRY}}/${{secrets.ECR_REPOSITORY}}:$IMAGE_TAG . 

      - name: Install Trivy (binary setup & cache)
        uses: aquasecurity/setup-trivy@v0.2.3
        with:
          version: v0.64.1
          cache: true
      
      - name: Run Trivy scan (image mode)
        uses: aquasecurity/trivy-action@0.32.0
        with:
          image-ref: ${{secrets.ECR_REGISTRY}}/${{secrets.ECR_REPOSITORY}}:$IMAGE_TAG
          format: sarif
          output: trivy-results.sarif
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true


      # - name: Scan Docker Image with Trivy
      #   run: |
      #     trivy image --exit-code 1 --severity HIGH,CRITICAL $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push to Docker Hub
        run: docker push ${{secrets.ECR_REGISTRY}}/${{secrets.ECR_REPOSITORY}}:$IMAGE_TAG
